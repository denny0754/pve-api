// Logging Library
const winston = require('winston');
const pveApi = require('./pve-api');

module.exports = function (uname, pwd, realm, host, verboseLevel) {

    const pve_utils = require('./pve-curl')(verboseLevel);

    var _loggerLevel = 'error';

    // Logging levels defined as of `RFC5424`
    // emerg: 0,  alert: 1,  crit: 2,  error: 3, 
    // warning: 4, notice: 5, info: 6, debug: 7
    switch (parseInt(verboseLevel)) {
        case 0: { _loggerLevel = 'error'; break; }
        case 1: { _loggerLevel = 'warning'; break; }
        case 2: { _loggerLevel = 'info'; break; }
        case 3: { _loggerLevel = 'debug'; break; }
        default: { _loggerLevel = 'error'; break; }
    }

    const _logger = winston.createLogger({
        levels: winston.config.syslog.levels,
        transports: [new winston.transports.Console({
            level: _loggerLevel,
            format: winston.format.combine(winston.format.colorize(), winston.format.simple())
        })]
    });

    if (verboseLevel === 'undefined' || verboseLevel === null || verboseLevel < 0) {
        _logger.pause();
    }

    // Authentication Info
    var _pveAuthInfo = {};
    _pveAuthInfo.apiToken = null;
    _pveAuthInfo.username = `${uname}@${realm}`;
    _pveAuthInfo.password = pwd;
    _pveAuthInfo.realm = realm;
    _pveAuthInfo.host = host;
    _pveAuthInfo.endpoint = `https://${_pveAuthInfo.host}:8006/api2/json`;

    var _pveTicket = {};
    _pveTicket.ticket = '';
    _pveTicket.csrfPreventionToken = '';
    _pveTicket.timeStamp = 0;

    // `_standaloneFlag` tells whether the ticket is generated by the main module(`pve-api.js`)[$_standaloneFlag=false]
    // or by the standalone module(`pve-storage/api.js`)[$_standaloneFlag=true]
    // Default is $_standaloneFlag=true
    var _standaloneFlag = true;

    let _GenerateNewTicket = async () => {
        if (_standaloneFlag) {
            if (_pveTicket.timeStamp + 7200 < new Date().getTime()) {
                var response = await pve_utils.PveCurl.Post(
                    `${_pveAuthInfo.endpoint}/access/ticket`,
                    {
                        username: _pveAuthInfo.username,
                        password: _pveAuthInfo.password
                    },
                    "",
                    ""
                );
                var resBody = null;

                if (response.body !== 'undefined' && response.body !== null) {
                    var body = response.body;
                    if (typeof (body) === 'string') {
                        resBody = JSON.parse(body);
                    } else {
                        resBody = body;
                    }
                }
                var ticketData = resBody.data;
                _pveTicket.csrfPreventionToken = ticketData.CSRFPreventionToken;
                _pveTicket.ticket = ticketData.ticket;
                _pveTicket.timeStamp = new Date().getTime();
            }
        }
    };

    let Module = {
        /**
         * @access private
         * @param {object} ticket 
         * @description Sets the ticket to be used to make request to the API.
         * 
         *              __Used only by module `pve-api.js`.__
         * 
         *              __Use of this function is highly discouraged!__
         */
        _SetTicket: function (ticket) {
            _pveTicket.csrfPreventionToken = ticket.csrfPreventionToken;
            _pveTicket.ticket = ticket.ticket;
            _pveTicket.timeStamp = ticket.timeStamp;
            _standaloneFlag = false;
        },

        SetSslVerifyPeer: (sslVerifyPeer) => {
            pve_utils.PveCurl.SetSslVerifyPeer(sslVerifyPeer);
        },

        SetSslVerifyHost: (sslVerifyHost) => {
            pve_utils.PveCurl.SetSslVerifyHost(sslVerifyHost);
        },

        Get: async function () {
            await _GenerateNewTicket();
            return await pve_utils.PveCurl.Get(
                `${_pveAuthInfo.endpoint}/nodes`,
                {},
                {},
                { PVEAuthCookie: _pveTicket.ticket }
            );
        },

        Node: function (node) {
            return {
                Get: async function () {
                    await _GenerateNewTicket();
                    return await pve_utils.PveCurl.Get(
                        `${_pveAuthInfo.endpoint}/nodes/${node}`,
                        {},
                        {},
                        { PVEAuthCookie: _pveTicket.ticket }
                    );
                },

                Apt: {
                    Get: async function () {
                        await _GenerateNewTicket();
                        return await pve_utils.PveCurl.Get(
                            `${_pveAuthInfo.endpoint}/nodes/${node}/apt`,
                            {},
                            {},
                            { PVEAuthCookie: _pveTicket.ticket }
                        );
                    },

                    ChangeLog: {
                        Get: async function (params) {
                            await _GenerateNewTicket();
                            return await pve_utils.PveCurl.Get(
                                `${_pveAuthInfo.endpoint}/nodes/${node}/apt/changelog`,
                                params,
                                {},
                                { PVEAuthCookie: _pveTicket.ticket }
                            );
                        }
                    },
                    Repositories: {
                        Get: async function () {
                            await _GenerateNewTicket();
                            return await pve_utils.PveCurl.Get(
                                `${_pveAuthInfo.endpoint}/nodes/${node}/apt/repositories`,
                                {},
                                {},
                                { PVEAuthCookie: _pveTicket.ticket }
                            );
                        },

                        Post: async function (params) {
                            await _GenerateNewTicket();
                            return await pve_utils.PveCurl.Post(
                                `${_pveAuthInfo.endpoint}/nodes/${node}/apt/repositories`,
                                params,
                                { CSRFPreventionToken: _pveTicket.csrfPreventionToken },
                                { PVEAuthCookie: _pveTicket.ticket }
                            );
                        },

                        Put: async function (params) {
                            await _GenerateNewTicket();
                            return await pve_utils.PveCurl.Put(
                                `${_pveAuthInfo.endpoint}/nodes/${node}/apt/repositories`,
                                params,
                                { CSRFPreventionToken: _pveTicket.csrfPreventionToken },
                                { PVEAuthCookie: _pveTicket.ticket }
                            );
                        }
                    },

                    Update: {
                        Get: async function () {
                            await _GenerateNewTicket();
                            return await pve_utils.PveCurl.Get(
                                `${_pveAuthInfo.endpoint}/nodes/${node}/apt/update`,
                                {},
                                {},
                                { PVEAuthCookie: _pveTicket.ticket }
                            );
                        },

                        Post: async function (params) {
                            await _GenerateNewTicket();
                            return await pve_utils.PveCurl.Post(
                                `${_pveAuthInfo.endpoint}/nodes/${node}/apt/update`,
                                params,
                                { CSRFPreventionToken: _pveTicket.csrfPreventionToken },
                                { PVEAuthCookie: _pveTicket.ticket }
                            );
                        }
                    },
                    Version: {
                        Get: async function () {
                            await _GenerateNewTicket();
                            return await pve_utils.PveCurl.Get(
                                `${_pveAuthInfo.endpoint}/nodes/${node}/apt/version`,
                                {},
                                {},
                                { PVEAuthCookie: _pveTicket.ticket }
                            );
                        }
                    }
                },

                Capabilities: {
                    Get: async function () {
                        await _GenerateNewTicket();
                        return await pve_utils.PveCurl.Get(
                            `${_pveAuthInfo.endpoint}/nodes/${node}/capabilities`,
                            {},
                            {},
                            { PVEAuthCookie: _pveTicket.ticket }
                        );
                    },

                    Qemu: {
                        Get: async function () {
                            await _GenerateNewTicket();
                            return await pve_utils.PveCurl.Get(
                                `${_pveAuthInfo.endpoint}/nodes/${node}/capabilities/qemu`,
                                {},
                                {},
                                { PVEAuthCookie: _pveTicket.ticket }
                            );
                        },

                        Cpu: {
                            Get: async function () {
                                await _GenerateNewTicket();
                                return await pve_utils.PveCurl.Get(
                                    `${_pveAuthInfo.endpoint}/nodes/${node}/capabilities/qemu/cpu`,
                                    {},
                                    {},
                                    { PVEAuthCookie: _pveTicket.ticket }
                                );
                            }
                        },
                        Machines: {
                            Get: async function () {
                                await _GenerateNewTicket();
                                return await pve_utils.PveCurl.Get(
                                    `${_pveAuthInfo.endpoint}/nodes/${node}/capabilities/qemu/machines`,
                                    {},
                                    {},
                                    { PVEAuthCookie: _pveTicket.ticket }
                                );
                            }
                        }
                    }
                },

                Ceph: {
                    Get: async function () {
                        await _GenerateNewTicket();
                        return await pve_utils.PveCurl.Get(
                            `${_pveAuthInfo.endpoint}/nodes/${node}/ceph`,
                            {},
                            {},
                            { PVEAuthCookie: _pveTicket.ticket }
                        );
                    },
                    Fs: {
                        Get: async function () {
                            await _GenerateNewTicket();
                            return await pve_utils.PveCurl.Get(
                                `${_pveAuthInfo.endpoint}/nodes/${node}/ceph/fs`,
                                {},
                                {},
                                { PVEAuthCookie: _pveTicket.ticket }
                            );
                        },

                        Name: function (name) {
                            return {
                                Post: async function (params) {
                                    await _GenerateNewTicket();
                                    return await pve_utils.PveCurl.Post(
                                        `${_pveAuthInfo.endpoint}/nodes/${node}/ceph/${name}`,
                                        params,
                                        { CSRFPreventionToken: _pveTicket.csrfPreventionToken },
                                        { PVEAuthCookie: _pveTicket.ticket }
                                    );
                                }
                            }
                        }
                    },

                    Mds: {
                        Get: async function () {
                            await _GenerateNewTicket();
                            return await pve_utils.PveCurl.Get(
                                `${_pveAuthInfo.endpoint}/nodes/${node}/ceph/mds`,
                                {},
                                {},
                                { PVEAuthCookie: _pveTicket.ticket }
                            );
                        },

                        Name: function (name) {
                            return {
                                Post: async function (params) {
                                    await _GenerateNewTicket();
                                    return await pve_utils.PveCurl.Get(
                                        `${_pveAuthInfo.endpoint}/nodes/${node}/ceph/mds/${name}`,
                                        params,
                                        { CSRFPreventionToken: _pveTicket.csrfPreventionToken },
                                        { PVEAuthCookie: _pveTicket.ticket }
                                    );
                                },

                                Delete: async function (params) {
                                    await _GenerateNewTicket();
                                    return await pve_utils.PveCurl.Get(
                                        `${_pveAuthInfo.endpoint}/nodes/${node}/ceph/mds/${name}`,
                                        params,
                                        { CSRFPreventionToken: _pveTicket.csrfPreventionToken },
                                        { PVEAuthCookie: _pveTicket.ticket }
                                    );
                                }
                            }
                        }
                    },

                    Mgr: {
                        Get: async function () {
                            await _GenerateNewTicket();
                            return await pve_utils.PveCurl.Get(
                                `${_pveAuthInfo.endpoint}/nodes/${node}/ceph/mgr`,
                                {},
                                {},
                                { PVEAuthCookie: _pveTicket.ticket }
                            );
                        },
                        Id: function (id) {
                            return {
                                Post: async function (params) {
                                    await _GenerateNewTicket();
                                    return await pve_utils.PveCurl.Get(
                                        `${_pveAuthInfo.endpoint}/nodes/${node}/ceph/mgr/${id}`,
                                        params,
                                        { CSRFPreventionToken: _pveTicket.csrfPreventionToken },
                                        { PVEAuthCookie: _pveTicket.ticket }
                                    );
                                },
                                Delete: async function (params) {
                                    await _GenerateNewTicket();
                                    return await pve_utils.PveCurl.Get(
                                        `${_pveAuthInfo.endpoint}/nodes/${node}/ceph/mgr/${id}`,
                                        params,
                                        { CSRFPreventionToken: _pveTicket.csrfPreventionToken },
                                        { PVEAuthCookie: _pveTicket.ticket }
                                    );
                                }
                            }
                        }
                    },

                    Mon: {
                        Get: async function () {
                            await _GenerateNewTicket();
                            return await pve_utils.PveCurl.Get(
                                `${_pveAuthInfo.endpoint}/nodes/${node}/ceph/mon`,
                                {},
                                {},
                                { PVEAuthCookie: _pveTicket.ticket }
                            );
                        },

                        MonID: async function (monid) {
                            return {
                                Post: async function (params) {
                                    await _GenerateNewTicket();
                                    return await pve_utils.PveCurl.Get(
                                        `${_pveAuthInfo.endpoint}/nodes/${node}/ceph/mon/${monid}`,
                                        params,
                                        { CSRFPreventionToken: _pveTicket.csrfPreventionToken },
                                        { PVEAuthCookie: _pveTicket.ticket }
                                    );
                                },

                                Delete: async function (params) {
                                    await _GenerateNewTicket();
                                    return await pve_utils.PveCurl.Get(
                                        `${_pveAuthInfo.endpoint}/nodes/${node}/ceph/mon/${monid}`,
                                        params,
                                        { CSRFPreventionToken: _pveTicket.csrfPreventionToken },
                                        { PVEAuthCookie: _pveTicket.ticket }
                                    );
                                }
                            }
                        }
                    },

                    Osd: {
                        Get: async function () {
                            await _GenerateNewTicket();
                            return await pve_utils.PveCurl.Get(
                                `${_pveAuthInfo.endpoint}/nodes/${node}/ceph/osd`,
                                {},
                                {},
                                { PVEAuthCookie: _pveTicket.ticket }
                            );
                        },

                        Post: async function (params) {
                            await _GenerateNewTicket();
                            return await pve_utils.PveCurl.Post(
                                `${_pveAuthInfo.endpoint}/nodes/${node}/ceph/osd`,
                                params,
                                { CSRFPreventionToken: _pveTicket.csrfPreventionToken },
                                { PVEAuthCookie: _pveTicket.ticket }
                            );
                        },

                        OsdID: function (osdid) {
                            return {
                                Delete: async function (params) {
                                    await _GenerateNewTicket();
                                    return await pve_utils.PveCurl.Get(
                                        `${_pveAuthInfo.endpoint}/nodes/${node}/ceph/osd/${osdid}`,
                                        params,
                                        { CSRFPreventionToken: _pveTicket.csrfPreventionToken },
                                        { PVEAuthCookie: _pveTicket.ticket }
                                    );
                                },
                                In: {
                                    Post: async function (params) {
                                        await _GenerateNewTicket();
                                        return await pve_utils.PveCurl.Post(
                                            `${_pveAuthInfo.endpoint}/nodes/${node}/ceph/osd/${osdid}/in`,
                                            params,
                                            { CSRFPreventionToken: _pveTicket.csrfPreventionToken },
                                            { PVEAuthCookie: _pveTicket.ticket }
                                        );
                                    }
                                },
                                Out: {
                                    Post: async function (params) {
                                        await _GenerateNewTicket();
                                        return await pve_utils.PveCurl.Post(
                                            `${_pveAuthInfo.endpoint}/nodes/${node}/ceph/osd/${osdid}/out`,
                                            params,
                                            { CSRFPreventionToken: _pveTicket.csrfPreventionToken },
                                            { PVEAuthCookie: _pveTicket.ticket }
                                        );
                                    }
                                },
                                Scrub: {
                                    Post: async function (params) {
                                        await _GenerateNewTicket();
                                        return await pve_utils.PveCurl.Post(
                                            `${_pveAuthInfo.endpoint}/nodes/${node}/ceph/osd/${osdid}/scrub`,
                                            params,
                                            { CSRFPreventionToken: _pveTicket.csrfPreventionToken },
                                            { PVEAuthCookie: _pveTicket.ticket }
                                        );
                                    }
                                }
                            }
                        }
                    },

                    Pools: {
                        Get: async function () { },
                        Post: async function (params) { },
                        Name: function (name) {
                            return {
                                Get: async function () { },
                                Put: async function (params) { },
                                Delete: async function (params) { }
                            }
                        }
                    },

                    Config: {
                        Get: async function () {
                            await _GenerateNewTicket();
                            return await pve_utils.PveCurl.Get(
                                `${_pveAuthInfo.endpoint}/nodes/${node}/ceph/config`,
                                {},
                                {},
                                { PVEAuthCookie: _pveTicket.ticket }
                            );
                        }
                    },

                    ConfigDb: {
                        Get: async function () {
                            await _GenerateNewTicket();
                            return await pve_utils.PveCurl.Get(
                                `${_pveAuthInfo.endpoint}/nodes/${node}/ceph/configdb`,
                                {},
                                {},
                                { PVEAuthCookie: _pveTicket.ticket }
                            );
                        }
                    },

                    Crush: {
                        Get: async function () {
                            await _GenerateNewTicket();
                            return await pve_utils.PveCurl.Get(
                                `${_pveAuthInfo.endpoint}/nodes/${node}/ceph/crush`,
                                {},
                                {},
                                { PVEAuthCookie: _pveTicket.ticket }
                            );
                        }
                    },

                    Init: {
                        Post: async function () {
                            await _GenerateNewTicket();
                            return await pve_utils.PveCurl.Get(
                                `${_pveAuthInfo.endpoint}/nodes/${node}/ceph/init`,
                                {},
                                {},
                                { PVEAuthCookie: _pveTicket.ticket }
                            );
                        }
                    },

                    Log: {
                        Get: async function () {
                            await _GenerateNewTicket();
                            return await pve_utils.PveCurl.Get(
                                `${_pveAuthInfo.endpoint}/nodes/${node}/ceph/log`,
                                {},
                                {},
                                { PVEAuthCookie: _pveTicket.ticket }
                            );
                        }
                    },

                    Restart: {
                        Post: async function (params) {
                            await _GenerateNewTicket();
                            return await pve_utils.PveCurl.Get(
                                `${_pveAuthInfo.endpoint}/nodes/${node}/ceph/config`,
                                params,
                                { CSRFPreventionToken: _pveTicket.csrfPreventionToken },
                                { PVEAuthCookie: _pveTicket.ticket }
                            );
                        }
                    },

                    Rules: {
                        Get: async function () {
                            await _GenerateNewTicket();
                            return await pve_utils.PveCurl.Get(
                                `${_pveAuthInfo.endpoint}/nodes/${node}/ceph/rules`,
                                {},
                                {},
                                { PVEAuthCookie: _pveTicket.ticket }
                            );
                        }
                    },

                    Start: {
                        Post: async function (params) {
                            await _GenerateNewTicket();
                            return await pve_utils.PveCurl.Get(
                                `${_pveAuthInfo.endpoint}/nodes/${node}/ceph/start`,
                                params,
                                { CSRFPreventionToken: _pveTicket.csrfPreventionToken },
                                { PVEAuthCookie: _pveTicket.ticket }
                            );
                        }
                    },

                    Status: {
                        Get: async function () {
                            await _GenerateNewTicket();
                            return await pve_utils.PveCurl.Get(
                                `${_pveAuthInfo.endpoint}/nodes/${node}/ceph/status`,
                                {},
                                {},
                                { PVEAuthCookie: _pveTicket.ticket }
                            );
                        }
                    },

                    Stop: {
                        Post: async function (params) {
                            await _GenerateNewTicket();
                            return await pve_utils.PveCurl.Get(
                                `${_pveAuthInfo.endpoint}/nodes/${node}/ceph/stop`,
                                params,
                                { CSRFPreventionToken: _pveTicket.csrfPreventionToken },
                                { PVEAuthCookie: _pveTicket.ticket }
                            );
                        }
                    }
                },

                Certificates: {
                    Get: async function () {
                        await _GenerateNewTicket();
                        return await pve_utils.PveCurl.Get(
                            `${_pveAuthInfo.endpoint}/nodes/${node}/certificates`,
                            {},
                            {},
                            { PVEAuthCookie: _pveTicket.ticket }
                        );
                    },

                    Acme: {
                        Get: async function () {
                            await _GenerateNewTicket();
                            return await pve_utils.PveCurl.Get(
                                `${_pveAuthInfo.endpoint}/nodes/${node}/certificates/acme`,
                                {},
                                {},
                                { PVEAuthCookie: _pveTicket.ticket }
                            );
                        },

                        Certificate: {
                            Post: async function (params) {
                                await _GenerateNewTicket();
                                return await pve_utils.PveCurl.Post(
                                    `${_pveAuthInfo.endpoint}/nodes/${node}/certificates/acme/certificate`,
                                    params,
                                    { CSRFPreventionToken: _pveTicket.csrfPreventionToken },
                                    { PVEAuthCookie: _pveTicket.ticket }
                                );
                            },

                            Put: async function (params) {
                                await _GenerateNewTicket();
                                return await pve_utils.PveCurl.Put(
                                    `${_pveAuthInfo.endpoint}/nodes/${node}/certificates/acme/certificate`,
                                    params,
                                    { CSRFPreventionToken: _pveTicket.csrfPreventionToken },
                                    { PVEAuthCookie: _pveTicket.ticket }
                                );
                            },

                            Delete: async function () {
                                await _GenerateNewTicket();
                                return await pve_utils.PveCurl.Delete(
                                    `${_pveAuthInfo.endpoint}/nodes/${node}/certificates/acme/certificate`,
                                    {},
                                    { CSRFPreventionToken: _pveTicket.csrfPreventionToken },
                                    { PVEAuthCookie: _pveTicket.ticket }
                                );
                            }
                        }
                    },

                    Custom: {
                        Post: async function (params) {
                            await _GenerateNewTicket();
                            return await pve_utils.PveCurl.Post(
                                `${_pveAuthInfo.endpoint}/nodes/${node}/certificates/custom`,
                                params,
                                { CSRFPreventionToken: _pveTicket.csrfPreventionToken },
                                { PVEAuthCookie: _pveTicket.ticket }
                            );
                        },

                        Delete: async function (params) {
                            await _GenerateNewTicket();
                            return await pve_utils.PveCurl.Delete(
                                `${_pveAuthInfo.endpoint}/nodes/${node}/certificates/custom`,
                                params,
                                { CSRFPreventionToken: _pveTicket.csrfPreventionToken },
                                { PVEAuthCookie: _pveTicket.ticket }
                            );
                        }
                    },

                    Info: {
                        Get: async function () {
                            await _GenerateNewTicket();
                            return await pve_utils.PveCurl.Get(
                                `${_pveAuthInfo.endpoint}/nodes/${node}/certificates/info`,
                                {},
                                {},
                                { PVEAuthCookie: _pveTicket.ticket }
                            );
                        }
                    }
                },

                Disks: {
                    Get: async function () {
                        await _GenerateNewTicket();
                        return await pve_utils.PveCurl.Get(
                            `${_pveAuthInfo.endpoint}/nodes/${node}/disks`,
                            {},
                            {},
                            { PVEAuthCookie: _pveTicket.ticket }
                        );
                    },

                    Zfs: {
                        Get: async function () {
                            await _GenerateNewTicket();
                            return await pve_utils.PveCurl.Get(
                                `${_pveAuthInfo.endpoint}/nodes/${node}/disks/zfs`,
                                {},
                                {},
                                { PVEAuthCookie: _pveTicket.ticket }
                            );
                        },

                        Post: async function (params) {
                            await _GenerateNewTicket();
                            return await pve_utils.PveCurl.Post(
                                `${_pveAuthInfo.endpoint}/nodes/${node}/disks/zfs`,
                                params,
                                { CSRFPreventionToken: _pveTicket.csrfPreventionToken },
                                { PVEAuthCookie: _pveTicket.ticket }
                            );
                        },

                        Name: function (name) {
                            return {
                                Get: async function () {
                                    await _GenerateNewTicket();
                                    return await pve_utils.PveCurl.Get(
                                        `${_pveAuthInfo.endpoint}/nodes/${node}/disks/zfs/${name}`,
                                        {},
                                        {},
                                        { PVEAuthCookie: _pveTicket.ticket }
                                    );
                                }
                            }
                        }
                    },

                    Directory: {
                        Get: async function () {
                            await _GenerateNewTicket();
                            return await pve_utils.PveCurl.Get(
                                `${_pveAuthInfo.endpoint}/nodes/${node}/disks/directory`,
                                {},
                                {},
                                { PVEAuthCookie: _pveTicket.ticket }
                            );
                        },

                        Post: async function (params) {
                            await _GenerateNewTicket();
                            return await pve_utils.PveCurl.Post(
                                `${_pveAuthInfo.endpoint}/nodes/${node}/disks/directory`,
                                params,
                                { CSRFPreventionToken: _pveTicket.csrfPreventionToken },
                                { PVEAuthCookie: _pveTicket.ticket }
                            );
                        }
                    },

                    InitGpt: {
                        Post: async function (params) {
                            await _GenerateNewTicket();
                            return await pve_utils.PveCurl.Post(
                                `${_pveAuthInfo.endpoint}/nodes/${node}/disks/initgpt`,
                                params,
                                { CSRFPreventionToken: _pveTicket.csrfPreventionToken },
                                { PVEAuthCookie: _pveTicket.ticket }
                            );
                        }
                    },

                    List: {
                        Get: async function (params) {
                            await _GenerateNewTicket();
                            return await pve_utils.PveCurl.Get(
                                `${_pveAuthInfo.endpoint}/nodes/${node}/disks/list`,
                                params,
                                {},
                                { PVEAuthCookie: _pveTicket.ticket }
                            );
                        }
                    },

                    Lvm: {
                        Get: async function () {
                            await _GenerateNewTicket();
                            return await pve_utils.PveCurl.Get(
                                `${_pveAuthInfo.endpoint}/nodes/${node}/disks/lvm`,
                                {},
                                {},
                                { PVEAuthCookie: _pveTicket.ticket }
                            );
                        },

                        Post: async function (params) {
                            await _GenerateNewTicket();
                            return await pve_utils.PveCurl.Post(
                                `${_pveAuthInfo.endpoint}/nodes/${node}/disks/lvm`,
                                params,
                                { CSRFPreventionToken: _pveTicket.csrfPreventionToken },
                                { PVEAuthCookie: _pveTicket.ticket }
                            );
                        }
                    },

                    LvmThin: {
                        Get: async function () {
                            await _GenerateNewTicket();
                            return await pve_utils.PveCurl.Get(
                                `${_pveAuthInfo.endpoint}/nodes/${node}/disks/lvmthin`,
                                {},
                                {},
                                { PVEAuthCookie: _pveTicket.ticket }
                            );
                        },

                        Post: async function (params) {
                            await _GenerateNewTicket();
                            return await pve_utils.PveCurl.Post(
                                `${_pveAuthInfo.endpoint}/nodes/${node}/disks/lvmthin`,
                                params,
                                { CSRFPreventionToken: _pveTicket.csrfPreventionToken },
                                { PVEAuthCookie: _pveTicket.ticket }
                            );
                        }
                    },

                    Smart: {
                        Get: async function (params) {
                            await _GenerateNewTicket();
                            return await pve_utils.PveCurl.Get(
                                `${_pveAuthInfo.endpoint}/nodes/${node}/disks/smart`,
                                params,
                                {},
                                { PVEAuthCookie: _pveTicket.ticket }
                            );
                        }
                    },

                    WipeDisk: {
                        Put: async function () {
                            await _GenerateNewTicket();
                            return await pve_utils.PveCurl.Put(
                                `${_pveAuthInfo.endpoint}/nodes/${node}/disks/wipedisk`,
                                params,
                                { CSRFPreventionToken: _pveTicket.csrfPreventionToken },
                                { PVEAuthCookie: _pveTicket.ticket }
                            );
                        }
                    }
                },

                Firewall: {
                    Get: async function () {
                        await _GenerateNewTicket();
                        return await pve_utils.PveCurl.Get(
                            `${_pveAuthInfo.endpoint}/nodes/${node}/firewall`,
                            {},
                            {},
                            { PVEAuthCookie: _pveTicket.ticket }
                        );
                    },

                    Rules: {
                        Get: async function () {
                            await _GenerateNewTicket();
                            return await pve_utils.PveCurl.Get(
                                `${_pveAuthInfo.endpoint}/nodes/${node}/firewall/rules`,
                                {},
                                {},
                                { PVEAuthCookie: _pveTicket.ticket }
                            );
                        },

                        Post: async function (params) {
                            await _GenerateNewTicket();
                            return await pve_utils.PveCurl.Post(
                                `${_pveAuthInfo.endpoint}/nodes/${node}/firewall/rules`,
                                params,
                                { CSRFPreventionToken: _pveTicket.csrfPreventionToken },
                                { PVEAuthCookie: _pveTicket.ticket }
                            );
                        },

                        Pos: function (pos) {
                            return {
                                Get: async function () {
                                    await _GenerateNewTicket();
                                    return await pve_utils.PveCurl.Get(
                                        `${_pveAuthInfo.endpoint}/nodes/${node}/firewall/rules/${pos}`,
                                        {},
                                        {},
                                        { PVEAuthCookie: _pveTicket.ticket }
                                    );
                                },

                                Put: async function (params) {
                                    await _GenerateNewTicket();
                                    return await pve_utils.PveCurl.Put(
                                        `${_pveAuthInfo.endpoint}/nodes/${node}/firewall/rules/${pos}`,
                                        { params },
                                        { CSRFPreventionToken: _pveTicket.csrfPreventionToken },
                                        { PVEAuthCookie: _pveTicket.ticket }
                                    );
                                },

                                Delete: async function (params) {
                                    await _GenerateNewTicket();
                                    return await pve_utils.PveCurl.Delete(
                                        `${_pveAuthInfo.endpoint}/nodes/${node}/firewall/rules/${pos}`,
                                        { params },
                                        { CSRFPreventionToken: _pveTicket.csrfPreventionToken },
                                        { PVEAuthCookie: _pveTicket.ticket }
                                    );
                                }
                            }
                        }
                    },

                    Log: {
                        Get: async function () {
                            await _GenerateNewTicket();
                            return await pve_utils.PveCurl.Get(
                                `${_pveAuthInfo.endpoint}/nodes/${node}/firewall/log`,
                                { },
                                { },
                                { PVEAuthCookie: _pveTicket.ticket }
                            );
                        }
                    },

                    Options: {
                        Get: async function () {
                            await _GenerateNewTicket();
                            return await pve_utils.PveCurl.Get(
                                `${_pveAuthInfo.endpoint}/nodes/${node}/firewall/options`,
                                { },
                                { },
                                { PVEAuthCookie: _pveTicket.ticket }
                            );
                        },
                        Put: async function (params) {
                            await _GenerateNewTicket();
                            return await pve_utils.PveCurl.Put(
                                `${_pveAuthInfo.endpoint}/nodes/${node}/firewall/options`,
                                { params },
                                { CSRFPreventionToken: _pveTicket.csrfPreventionToken },
                                { PVEAuthCookie: _pveTicket.ticket }
                            );
                        }
                    }
                },

                Hardware: {
                    Get: async function () {
                        await _GenerateNewTicket();
                        return await pve_utils.PveCurl.Get(
                            `${_pveAuthInfo.endpoint}/nodes/${node}/hardware`,
                            { },
                            { },
                            { PVEAuthCookie: _pveTicket.ticket }
                        );
                    },

                    Pci: {
                        Get: async function () {
                            await _GenerateNewTicket();
                            return await pve_utils.PveCurl.Get(
                                `${_pveAuthInfo.endpoint}/nodes/${node}/hardware/pci`,
                                { },
                                { },
                                { PVEAuthCookie: _pveTicket.ticket }
                            );
                        },

                        PciID: function (pciid) {
                            return {
                                Get: async function () {
                                    await _GenerateNewTicket();
                                    return await pve_utils.PveCurl.Get(
                                        `${_pveTicket.endpoint}/nodes/${node}/hardware/pci/${pciid}`,
                                        { },
                                        { },
                                        { PVEAuthCookie: _pveTicket.ticket }
                                    );
                                },

                                Mdev: {
                                    Get: async function () {
                                        await _GenerateNewTicket();
                                        return await pve_utils.PveCurl.Get(
                                            `${_pveTicket.endpoint}/nodes/${node}/hardware/pci/${pciid}`,
                                            { },
                                            { },
                                            { PVEAuthCookie: _pveTicket.ticket }
                                        );
                                    }
                                }
                            }
                        }
                    },

                    Usb: {
                        Get: async function () {
                            await _GenerateNewTicket();
                            return pve_utils.PveCurl.Get(
                                `${_pveTicket.endpoint}/nodes/${node}/hardware/usb`,
                                { },
                                { },
                                { PVEAuthCookie: _pveTicket.ticket }
                            )
                        }
                    }
                },

                Lxc: {
                    Get: async function () { },
                    Post: async function (params) { },

                    Vmid: function (vmid) {
                        return {

                            Get: async function () { },

                            Delete: async function (params) { },

                            Agent: {
                                Get: async function () { },

                                Post: async function (params) { },

                                Exec: {
                                    Post: async function (params) { }
                                },

                                ExecStatus: {
                                    Get: async function () { }
                                },

                                FileRead: {
                                    Get: async function () { }
                                },

                                FileWrite: {
                                    Post: async function (params) { }
                                },

                                FsFreezeFreeze: {
                                    Post: async function (params) { }
                                },

                                FsFreezeStatus: {
                                    Post: async function (params) { }
                                },

                                FsFreezeThaw: {
                                    Post: async function (params) { }
                                },

                                FsTrim: {
                                    Post: async function (params) { }
                                },

                                GetFsInfo: {
                                    Get: async function () { }
                                },

                                GetHostName: {
                                    Get: async function () { }
                                },

                                GetMemoryBlockInfo: {
                                    Get: async function () { }
                                },

                                GetMemoryBlocks: {
                                    Get: async function () { }
                                },

                                GetOsInfo: {
                                    Get: async function () { }
                                },

                                GetTime: {
                                    Get: async function () { }
                                },

                                GetTimezone: {
                                    Get: async function () { }
                                },

                                GetUsers: {
                                    Get: async function () { }
                                },

                                GetVCpus: {
                                    Get: async function () { }
                                },

                                Info: {
                                    Get: async function () { }
                                },

                                NetworkGetInterfaces: {
                                    Get: async function () { }
                                },

                                Ping: {
                                    Post: async function (params) { }
                                },

                                SetUserPassword: {
                                    Post: async function (params) { }
                                },

                                Shutdown: {
                                    Post: async function (params) { }
                                },

                                SuspendDisk: {
                                    Post: async function (params) { }
                                },

                                SuspendHybrid: {
                                    Post: async function (params) { }
                                },

                                SuspendRam: {
                                    Post: async function (params) { }
                                }
                            },

                            CloudInit: {
                                Dump: {
                                    Get: async function () { }
                                }
                            },

                            Firewall: {
                                Get: async function () { },
                                Aliases: {
                                    Get: async function () { },
                                    Post: async function (params) { },
                                    Name: function (name) {
                                        return {
                                            Get: async function () { },
                                            Put: async function (params) { },
                                            Delete: async function (params) { }
                                        }
                                    }
                                },

                                IpSet: {
                                    Get: async function () { },
                                    Post: async function (params) { },
                                    Name: function (name) {
                                        return {
                                            Get: async function () { },
                                            Post: async function (params) { },
                                            Delete: async function (params) { },
                                            Cidr: function (cidr) {
                                                return {
                                                    Get: async function () { },
                                                    Put: async function (params) { },
                                                    Delete: async function (params) { }
                                                }
                                            }
                                        }
                                    }
                                },

                                Rules: {
                                    Get: async function () { },
                                    Post: async function (params) { },
                                    Pos: function (pos) {
                                        return {
                                            Get: async function () { },
                                            Put: async function (params) { },
                                            Delete: async function (params) { }
                                        }
                                    }
                                },

                                Log: {
                                    Get: async function () { }
                                },

                                Options: {
                                    Get: async function () { },
                                    Put: async function (params) { }
                                },

                                Refs: {
                                    Get: async function () { }
                                }
                            },

                            SnapShot: {
                                Get: async function () { },
                                Post: async function (params) { },
                                SnapName: function (snapname) {
                                    return {
                                        Get: async function () { },
                                        Delete: async function (params) { },
                                        Config: {
                                            Get: async function () { },
                                            Put: async function (params) { }
                                        },

                                        Rollback: {
                                            Post: async function (params) { }
                                        }
                                    }
                                }
                            },

                            Status: {
                                Get: async function () { },

                                Current: {
                                    Get: async function () { }
                                },

                                Reboot: {
                                    Post: async function (params) { }
                                },

                                Reset: {
                                    Post: async function (params) { }
                                },

                                Resume: {
                                    Post: async function (params) { }
                                },

                                Shutdown: {
                                    Post: async function (params) { }
                                },

                                Start: {
                                    Post: async function (params) { }
                                },

                                Stop: {
                                    Post: async function (params) { }
                                },

                                Suspend: {
                                    Post: async function (params) { }
                                }
                            },

                            Clone: {
                                Post: async function (params) { }
                            },

                            Config: {
                                Get: async function () { },
                                Post: async function (params) { },
                                Put: async function (params) { }
                            },

                            Feature: {
                                Get: async function () { }
                            },

                            Migrate: {
                                Get: async function () { },
                                Post: async function (params) { }
                            },

                            Monitor: {
                                Post: async function (params) { }
                            },

                            MoveDisk: {
                                MoveDisk: function () { }
                            },

                            Pending: {
                                Get: async function () { }
                            },

                            Resize: {
                                Put: async function (params) { }
                            },

                            Rrd: {
                                Get: async function () { }
                            },

                            RrdData: {
                                Get: async function () { }
                            },

                            SendKey: {
                                Put: async function (params) { }
                            },

                            SpiceProxy: {
                                Post: async function (params) { }
                            },

                            Template: {
                                Post: async function (params) { }
                            },

                            TermProxy: {
                                Post: async function (params) { }
                            },

                            Unlink: {
                                Put: async function (params) { }
                            },

                            VncProxy: {
                                Post: async function (params) { }
                            },

                            VncWebSocket: {
                                Get: async function () { }
                            }
                        }
                    }
                },

                Network: {
                    Get: async function () { },
                    Post: async function (params) { },
                    Put: async function (params) { },
                    Delete: async function (params) { },
                    IFace: function (iface) {
                        return {
                            Get: async function () { },
                            Put: async function (params) { },
                            Delete: async function (params) { }
                        }
                    }
                },

                Qemu: {
                    Get: async function () { },
                    Post: async function (params) { },

                    Vmid: function (vmid) {
                        return {

                            Get: async function () { },

                            Delete: async function (params) { },

                            Agent: {
                                Get: async function () { },

                                Post: async function (params) { },

                                Exec: {
                                    Post: async function (params) { }
                                },

                                ExecStatus: {
                                    Get: async function () { }
                                },

                                FileRead: {
                                    Get: async function () { }
                                },

                                FileWrite: {
                                    Post: async function (params) { }
                                },

                                FsFreezeFreeze: {
                                    Post: async function (params) { }
                                },

                                FsFreezeStatus: {
                                    Post: async function (params) { }
                                },

                                FsFreezeThaw: {
                                    Post: async function (params) { }
                                },

                                FsTrim: {
                                    Post: async function (params) { }
                                },

                                GetFsInfo: {
                                    Get: async function () { }
                                },

                                GetHostName: {
                                    Get: async function () { }
                                },

                                GetMemoryBlockInfo: {
                                    Get: async function () { }
                                },

                                GetMemoryBlocks: {
                                    Get: async function () { }
                                },

                                GetOsInfo: {
                                    Get: async function () { }
                                },

                                GetTime: {
                                    Get: async function () { }
                                },

                                GetTimezone: {
                                    Get: async function () { }
                                },

                                GetUsers: {
                                    Get: async function () { }
                                },

                                GetVCpus: {
                                    Get: async function () { }
                                },

                                Info: {
                                    Get: async function () { }
                                },

                                NetworkGetInterfaces: {
                                    Get: async function () { }
                                },

                                Ping: {
                                    Post: async function (params) { }
                                },

                                SetUserPassword: {
                                    Post: async function (params) { }
                                },

                                Shutdown: {
                                    Post: async function (params) { }
                                },

                                SuspendDisk: {
                                    Post: async function (params) { }
                                },

                                SuspendHybrid: {
                                    Post: async function (params) { }
                                },

                                SuspendRam: {
                                    Post: async function (params) { }
                                }
                            },

                            CloudInit: {
                                Dump: {
                                    Get: async function () { }
                                }
                            },

                            Firewall: {
                                Get: async function () { },
                                Aliases: {
                                    Get: async function () { },
                                    Post: async function (params) { },
                                    Name: function (name) {
                                        return {
                                            Get: async function () { },
                                            Put: async function (params) { },
                                            Delete: async function (params) { }
                                        }
                                    }
                                },

                                IpSet: {
                                    Get: async function () { },
                                    Post: async function (params) { },
                                    Name: function (name) {
                                        return {
                                            Get: async function () { },
                                            Post: async function (params) { },
                                            Delete: async function (params) { },
                                            Cidr: function (cidr) {
                                                return {
                                                    Get: async function () { },
                                                    Put: async function (params) { },
                                                    Delete: async function (params) { }
                                                }
                                            }
                                        }
                                    }
                                },

                                Rules: {
                                    Get: async function () { },
                                    Post: async function (params) { },
                                    Pos: function (pos) {
                                        return {
                                            Get: async function () { },
                                            Put: async function (params) { },
                                            Delete: async function (params) { }
                                        }
                                    }
                                },

                                Log: {
                                    Get: async function () { }
                                },

                                Options: {
                                    Get: async function () { },
                                    Put: async function (params) { }
                                },

                                Refs: {
                                    Get: async function () { }
                                }
                            },

                            SnapShot: {
                                Get: async function () { },
                                Post: async function (params) { },
                                SnapName: function (snapname) {
                                    return {
                                        Get: async function () { },
                                        Delete: async function (params) { },
                                        Config: {
                                            Get: async function () { },
                                            Put: async function (params) { }
                                        },

                                        Rollback: {
                                            Post: async function (params) { }
                                        }
                                    }
                                }
                            },

                            Status: {
                                Get: async function () { },

                                Current: {
                                    Get: async function () { }
                                },

                                Reboot: {
                                    Post: async function (params) { }
                                },

                                Reset: {
                                    Post: async function (params) { }
                                },

                                Resume: {
                                    Post: async function (params) { }
                                },

                                Shutdown: {
                                    Post: async function (params) { }
                                },

                                Start: {
                                    Post: async function (params) { }
                                },

                                Stop: {
                                    Post: async function (params) { }
                                },

                                Suspend: {
                                    Post: async function (params) { }
                                }
                            },

                            Clone: {
                                Post: async function (params) { }
                            },

                            Config: {
                                Get: async function () { },
                                Post: async function (params) { },
                                Put: async function (params) { }
                            },

                            Feature: {
                                Get: async function () { }
                            },

                            Migrate: {
                                Get: async function () { },
                                Post: async function (params) { }
                            },

                            Monitor: {
                                Post: async function (params) { }
                            },

                            MoveDisk: {
                                MoveDisk: function () { }
                            },

                            Pending: {
                                Get: async function () { }
                            },

                            Resize: {
                                Put: async function (params) { }
                            },

                            Rrd: {
                                Get: async function () { }
                            },

                            RrdData: {
                                Get: async function () { }
                            },

                            SendKey: {
                                Put: async function (params) { }
                            },

                            SpiceProxy: {
                                Post: async function (params) { }
                            },

                            Template: {
                                Post: async function (params) { }
                            },

                            TermProxy: {
                                Post: async function (params) { }
                            },

                            Unlink: {
                                Put: async function (params) { }
                            },

                            VncProxy: {
                                Post: async function (params) { }
                            },

                            VncWebSocket: {
                                Get: async function () { }
                            }
                        }
                    }
                },

                Replication: {
                    Get: async function () { },

                    Id: function (id) {
                        return {
                            Get: async function () { },
                            Log: {
                                Get: async function () { }
                            },

                            ScheduleNow: {
                                Post: async function (params) { }
                            },

                            Status: {
                                Get: async function () { }
                            }
                        }
                    }
                },

                Scan: {
                    Get: async function () { },
                    Cifs: {
                        Get: async function () { }
                    },

                    GlusterFS: {
                        Get: async function () { }
                    },

                    Iscsi: {
                        Get: async function () { }
                    },

                    Lvm: {
                        Get: async function () { }
                    },

                    LvmThin: {
                        Get: async function () { }
                    },

                    Nfs: {
                        Get: async function () { }
                    },

                    Pbs: {
                        Get: async function () { }
                    },

                    Zfs: {
                        Get: async function () { }
                    }
                },

                Sdn: {
                    Get: async function () { },
                    Zones: {
                        Get: async function () { },
                        Zone: function (zone) {
                            return {
                                Get: async function () { },
                                Content: {
                                    Get: async function () { }
                                }
                            }
                        }
                    }
                },

                Services: {
                    Get: async function () { },
                    Service: function (service) {
                        return {
                            Get: async function () { },
                            Reload: {
                                Post: async function (params) { }
                            },

                            Restart: {
                                Post: async function (params) { }
                            },

                            Start: {
                                Post: async function (params) { }
                            },

                            State: {
                                Get: async function () { }
                            },

                            Stop: {
                                Post: async function (params) { }
                            }
                        }
                    }
                },

                Storage: {
                    Get: async function () { },
                    Storage: function (storage) {
                        return {
                            Get: async function () { },
                            Content: {
                                Get: async function () { },
                                Post: async function (params) { },
                                Volume: function (volume) {
                                    return {
                                        Get: async function () { },
                                        Post: async function (params) { },
                                        Put: async function (params) { },
                                        Delete: async function (params) { }
                                    }
                                }
                            },

                            FileRestore: {
                                Download: {
                                    Get: async function () { }
                                },
                                List: {
                                    Get: async function () { }
                                }
                            },

                            DownloadUrl: {
                                Post: async function (params) { }
                            },

                            PruneBackups: {
                                Get: async function () { },
                                Delete: async function (params) { }
                            },

                            Rrd: {
                                Get: async function () { }
                            },

                            RrdData: {
                                Get: async function () { }
                            },

                            Status: {
                                Get: async function () { }
                            },

                            Upload: {
                                Post: async function (params) { }
                            }
                        }
                    }
                },

                Tasks: {
                    Get: async function (params) {
                        await _GenerateNewTicket();
                        return await pve_utils.PveCurl.Get(
                            `${_pveAuthInfo.endpoint}/nodes/${node}/tasks`,
                            params,
                            { },
                            { PVEAuthCookie: _pveTicket.ticket }
                        );
                    },

                    Upid: function (upid) {
                        return {
                            Get: async function () {
                                await _GenerateNewTicket();
                                return await pve_utils.PveCurl.Get(
                                    `${_pveAuthInfo.endpoint}/nodes/${node}/tasks/${upid}`,
                                    { },
                                    { },
                                    { PVEAuthCookie: _pveTicket.ticket }
                                );
                            },

                            Delete: async function () {
                                await _GenerateNewTicket();
                                return await pve_utils.PveCurl.Delete(
                                    `${_pveAuthInfo.endpoint}/nodes/${node}/tasks/${upid}`,
                                    { },
                                    { CSRFPreventionToken: _pveTicket.csrfPreventionToken },
                                    { PVEAuthCookie: _pveTicket.ticket }
                                );
                            },

                            Log: {
                                Get: async function (params) {
                                    await _GenerateNewTicket();
                                    return await pve_utils.PveCurl.Get(
                                        `${_pveAuthInfo.endpoint}/nodes/${node}/tasks/${upid}/log`,
                                        params,
                                        { },
                                        { PVEAuthCookie: _pveTicket.ticket }
                                    );
                                }
                            },

                            Status: {
                                Get: async function (params) {
                                    await _GenerateNewTicket();
                                    return await pve_utils.PveCurl.Get(
                                        `${_pveAuthInfo.endpoint}/nodes/${node}/tasks/${upid}/status`,
                                        params,
                                        { },
                                        { PVEAuthCookie: _pveTicket.ticket }
                                    );
                                }
                            }
                        }
                    }
                },

                VZDump: {
                    Post: async function (params) {
                        await _GenerateNewTicket();
                        return await pve_utils.PveCurl.Post(
                            `${_pveAuthInfo.endpoint}/nodes/${node}/vzdump`,
                            params,
                            { CSRFPreventionToken: _pveTicket.csrfPreventionToken },
                            { PVEAuthCookie: _pveTicket.ticket }
                        );
                    },

                    Defaults: {
                        Get: async function (params) {
                            await _GenerateNewTicket();
                            return await pve_utils.PveCurl.Get(
                                `${_pveAuthInfo.endpoint}/nodes/${node}/vzdump/defaults`,
                                params,
                                { },
                                { PVEAuthCookie: _pveTicket.ticket }
                            );
                        }
                    },

                    ExtractConfig: {
                        Get: async function (params) {
                            await _GenerateNewTicket();
                            return await pve_utils.PveCurl.Get(
                                `${_pveAuthInfo.endpoint}/nodes/${node}/vzdump/extraconfig`,
                                params,
                                { },
                                { PVEAuthCookie: _pveTicket.ticket }
                            );
                        }
                    }
                },

                AplInfo: {
                    Get: async function () {
                        await _GenerateNewTicket();
                        return await pve_utils.PveCurl.Get(
                            `${_pveAuthInfo.endpoint}/nodes/${node}/aplinfo`,
                            { },
                            { },
                            { PVEAuthCookie: _pveTicket.ticket }
                        );
                    },

                    Post: async function (params) {
                        await _GenerateNewTicket();
                        return await pve_utils.PveCurl.Post(
                            `${_pveAuthInfo.endpoint}/nodes/${node}/aplinfo`,
                            params,
                            { CSRFPreventionToken: _pveTicket.csrfPreventionToken },
                            { PVEAuthCookie: _pveTicket.ticket }
                        );
                    }
                },

                Config: {
                    Get: async function (params) {
                        await _GenerateNewTicket();
                        return await pve_utils.PveCurl.Get(
                            `${_pveAuthInfo.endpoint}/nodes/${node}/config`,
                            params,
                            { },
                            { PVEAuthCookie: _pveTicket.ticket }
                        );
                    },

                    Put: async function (params) {
                        await _GenerateNewTicket();
                        return await pve_utils.PveCurl.Put(
                            `${_pveAuthInfo.endpoint}/nodes/${node}/config`,
                            params,
                            { CSRFPreventionToken: _pveTicket.csrfPreventionToken },
                            { PVEAuthCookie: _pveTicket.ticket }
                        );
                    }
                },

                Dns: {
                    Get: async function () {
                        await _GenerateNewTicket();
                        return await pve_utils.PveCurl.Get(
                            `${_pveAuthInfo.endpoint}/nodes/${node}/dns`,
                            { },
                            { },
                            { PVEAuthCookie: _pveTicket.ticket }
                        );
                    },

                    Put: async function (params) {
                        await _GenerateNewTicket();
                        return await pve_utils.PveCurl.Put(
                            `${_pveAuthInfo.endpoint}/nodes/${node}/dns`,
                            params,
                            { CSRFPreventionToken: _pveTicket.csrfPreventionToken },
                            { PVEAuthCookie: _pveTicket.ticket }
                        );
                    }
                },

                Execute: {
                    Get: async function () {
                        await _GenerateNewTicket();
                        return await pve_utils.PveCurl.Get(
                            `${_pveAuthInfo.endpoint}/nodes/${node}/execute`,
                            { },
                            { },
                            { PVEAuthCookie: _pveTicket.ticket }
                        );
                    },

                    Put: async function (params) {
                        await _GenerateNewTicket();
                        return await pve_utils.PveCurl.Put(
                            `${_pveAuthInfo.endpoint}/nodes/${node}/execute`,
                            params,
                            { CSRFPreventionToken: _pveTicket.csrfPreventionToken },
                            { PVEAuthCookie: _pveTicket.ticket }
                        );
                    }
                },

                Hosts: {
                    Get: async function () {
                        await _GenerateNewTicket();
                        return await pve_utils.PveCurl.Get(
                            `${_pveAuthInfo.endpoint}/nodes/${node}/hosts`,
                            { },
                            { },
                            { PVEAuthCookie: _pveTicket.ticket }
                        );
                    },

                    Post: async function (params) {
                        await _GenerateNewTicket();
                        return await pve_utils.PveCurl.Post(
                            `${_pveAuthInfo.endpoint}/nodes/${node}/hosts`,
                            params,
                            { CSRFPreventionToken: _pveTicket.csrfPreventionToken },
                            { PVEAuthCookie: _pveTicket.ticket }
                        );
                    }
                },

                Journal: {
                    Get: async function (params) {
                        await _GenerateNewTicket();
                        return await pve_utils.PveCurl.Get(
                            `${_pveAuthInfo.endpoint}/nodes/${node}/journal`,
                            params,
                            { CSRFPreventionToken: _pveTicket.csrfPreventionToken },
                            { PVEAuthCookie: _pveTicket.ticket }
                        );
                    }
                },

                MigrateAll: {
                    Post: async function (params) {
                        await _GenerateNewTicket();
                        return await pve_utils.PveCurl.Post(
                            `${_pveAuthInfo.endpoint}/nodes/${node}/migrateall`,
                            params,
                            { CSRFPreventionToken: _pveTicket.csrfPreventionToken },
                            { PVEAuthCookie: _pveTicket.ticket }
                        );
                    }
                },

                NetStat: {
                    Get: async function () {
                        await _GenerateNewTicket();
                        return await pve_utils.PveCurl.Get(
                            `${_pveAuthInfo.endpoint}/nodes/${node}/netstat`,
                            { },
                            { },
                            { PVEAuthCookie: _pveTicket.ticket }
                        );
                    }
                },

                Report: {
                    Get: async function () {
                        await _GenerateNewTicket();
                        return await pve_utils.PveCurl.Get(
                            `${_pveAuthInfo.endpoint}/nodes/${node}/report`,
                            { },
                            { },
                            { PVEAuthCookie: _pveTicket.ticket }
                        );
                    }
                },

                Rrd: {
                    Get: async function (params) {
                        await _GenerateNewTicket();
                        return await pve_utils.PveCurl.Get(
                            `${_pveAuthInfo.endpoint}/nodes/${node}/rrd`,
                            params,
                            { },
                            { PVEAuthCookie: _pveTicket.ticket }
                        );
                    }
                },

                RrdData: {
                    Get: async function (params) {
                        await _GenerateNewTicket();
                        return await pve_utils.PveCurl.Get(
                            `${_pveAuthInfo.endpoint}/nodes/${node}/rrddata`,
                            params,
                            { },
                            { PVEAuthCookie: _pveTicket.ticket }
                        );
                    }
                },

                SpiceShell: {
                    Post: async function (params) {
                        await _GenerateNewTicket();
                        return await pve_utils.PveCurl.Post(
                            `${_pveAuthInfo.endpoint}/nodes/${node}/spiceshell`,
                            params,
                            { CSRFPreventionToken: _pveTicket.csrfPreventionToken },
                            { PVEAuthCookie: _pveTicket.ticket }
                        );
                    }
                },

                StartAll: {
                    Post: async function (params) {
                        await _GenerateNewTicket();
                        return await pve_utils.PveCurl.Post(
                            `${_pveAuthInfo.endpoint}/nodes/${node}/startall`,
                            params,
                            { CSRFPreventionToken: _pveTicket.csrfPreventionToken },
                            { PVEAuthCookie: _pveTicket.ticket }
                        );
                    }
                },

                Status: {
                    Get: async function () {
                        await _GenerateNewTicket();
                        return await pve_utils.PveCurl.Get(
                            `${_pveAuthInfo.endpoint}/nodes/${node}/status`,
                            { },
                            { },
                            { PVEAuthCookie: _pveTicket.ticket }
                        );
                    },

                    Post: async function (params) {
                        await _GenerateNewTicket();
                        return await pve_utils.PveCurl.Post(
                            `${_pveAuthInfo.endpoint}/nodes/${node}/status`,
                            params,
                            { CSRFPreventionToken: _pveTicket.csrfPreventionToken },
                            { PVEAuthCookie: _pveTicket.ticket }
                        );
                    }
                },

                StopAll: {
                    Post: async function (params) {
                        await _GenerateNewTicket();
                        return await pve_utils.PveCurl.Post(
                            `${_pveAuthInfo.endpoint}/nodes/${node}/stopall`,
                            params,
                            { CSRFPreventionToken: _pveTicket.csrfPreventionToken },
                            { PVEAuthCookie: _pveTicket.ticket }
                        );
                    }
                },

                Subscription: {
                    Get: async function () {
                        await _GenerateNewTicket();
                        return await pve_utils.PveCurl.Get(
                            `${_pveAuthInfo.endpoint}/nodes/${node}/subscription`,
                            { },
                            { },
                            { PVEAuthCookie: _pveTicket.ticket }
                        );
                    },

                    Post: async function (params) {
                        await _GenerateNewTicket();
                        return await pve_utils.PveCurl.Post(
                            `${_pveAuthInfo.endpoint}/nodes/${node}/subscription`,
                            params,
                            { CSRFPreventionToken: _pveTicket.csrfPreventionToken },
                            { PVEAuthCookie: _pveTicket.ticket }
                        );
                    },

                    Put: async function (params) {
                        await _GenerateNewTicket();
                        return await pve_utils.PveCurl.Put(
                            `${_pveAuthInfo.endpoint}/nodes/${node}/subscription`,
                            params,
                            { CSRFPreventionToken: _pveTicket.csrfPreventionToken },
                            { PVEAuthCookie: _pveTicket.ticket }
                        );
                    },

                    Delete: async function () {
                        await _GenerateNewTicket();
                        return await pve_utils.PveCurl.Delete(
                            `${_pveAuthInfo.endpoint}/nodes/${node}/subscription`,
                            params,
                            { CSRFPreventionToken: _pveTicket.csrfPreventionToken },
                            { PVEAuthCookie: _pveTicket.ticket }
                        );
                    }
                },

                SysLog: {
                    Get: async function () {
                        await _GenerateNewTicket();
                        return await pve_utils.PveCurl.Get(
                            `${_pveAuthInfo.endpoint}/nodes/${node}/syslog`,
                            params,
                            { CSRFPreventionToken: _pveTicket.csrfPreventionToken },
                            { PVEAuthCookie: _pveTicket.ticket }
                        );
                    }
                },

                TermProxy: {
                    Post: async function (params) {
                        await _GenerateNewTicket();
                        return await pve_utils.PveCurl.Post(
                            `${_pveAuthInfo.endpoint}/nodes/${node}/termproxy`,
                            params,
                            { CSRFPreventionToken: _pveTicket.csrfPreventionToken },
                            { PVEAuthCookie: _pveTicket.ticket }
                        );
                    }
                },
                Time: {
                    Get: async function () {
                        await _GenerateNewTicket();
                        return await pve_utils.PveCurl.Get(
                            `${_pveAuthInfo.endpoint}/nodes/${node}/time`,
                            { },
                            { },
                            { PVEAuthCookie: _pveTicket.ticket }
                        );
                    },

                    Put: async function (params) {
                        await _GenerateNewTicket();
                        return await pve_utils.PveCurl.Put(
                            `${_pveAuthInfo.endpoint}/nodes/${node}/time`,
                            params,
                            { CSRFPreventionToken: _pveTicket.csrfPreventionToken },
                            { PVEAuthCookie: _pveTicket.ticket }
                        );
                    }
                },
                Version: {
                    Get: async function () {
                        await _GenerateNewTicket();
                        return await pve_utils.PveCurl.Get(
                            `${_pveAuthInfo.endpoint}/nodes/${node}/version`,
                            { },
                            { },
                            { PVEAuthCookie: _pveTicket.ticket }
                        );
                    }
                },

                VncShell: {
                    Post: async function (params) {
                        await _GenerateNewTicket();
                        return await pve_utils.PveCurl.Post(
                            `${_pveAuthInfo.endpoint}/nodes/${node}/vncshell`,
                            params,
                            { CSRFPreventionToken: _pveTicket.csrfPreventionToken },
                            { PVEAuthCookie: _pveTicket.ticket }
                        );
                    }
                },

                VncWebSocket: {
                    Get: async function () {
                        await _GenerateNewTicket();
                        return await pve_utils.PveCurl.Get(
                            `${_pveAuthInfo.endpoint}/nodes/${node}/vncwebsocket`,
                            { },
                            { },
                            { PVEAuthCookie: _pveTicket.ticket }
                        );
                    }
                },

                WakeOnLan: {
                    Post: async function () {
                        await _GenerateNewTicket();
                        return await pve_utils.PveCurl.Post(
                            `${_pveAuthInfo.endpoint}/nodes/${node}/wakeonlan`,
                            { },
                            { CSRFPreventionToken: _pveTicket.csrfPreventionToken },
                            { PVEAuthCookie: _pveTicket.ticket }
                        );
                    }
                },
            }
        }
    };

    return Module;
};