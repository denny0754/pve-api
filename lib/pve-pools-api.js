// Logging Library
const winston = require("winston");

module.exports = function (uname, pwd, realm, host, verboseLevel) {
	const pve_utils = require("./pve-curl")(verboseLevel);

	const logging = require("./utils/logging")(verboseLevel);

	var pveAuthInfo = {
		apiToken: null,
		username: `${uname}@${realm}`,
		password: pwd,
		realm: realm,
		host: host,
		endpoint: `https://${host}:8006/api2/json`,

		apiTicket: {
			ticket: "",
			csrfPreventionToken: "",
			timeStamp: 0
		}
	};

	// `standaloneFlag` tells whether the ticket is generated by the main module(`pve-api.js`)[$standaloneFlag=false]
	// or by the standalone module(`pve-storage/api.js`)[$standaloneFlag=true]
	// Default is $standaloneFlag=true
	var standaloneFlag = true;

	let _GenerateNewTicket = async () => {
		if (standaloneFlag) {
			if (pveAuthInfo.apiTicket.timeStamp + 7200 < new Date().getTime()) {
				var response = await pve_utils.PveCurl.Post(
					`${pveAuthInfo.endpoint}/access/ticket`,
					{
						username: pveAuthInfo.username,
						password: pveAuthInfo.password,
					},
					"",
					""
				);
				var resBody = null;

				if (response.body !== "undefined" && response.body !== null) {
					var body = response.body;
					if (typeof body === "string") {
						resBody = JSON.parse(body);
					} else {
						resBody = body;
					}
				}
				var ticketData = resBody.data;
				pveAuthInfo.apiTicket.csrfPreventionToken = ticketData.CSRFPreventionToken;
				pveAuthInfo.apiTicket.ticket = ticketData.ticket;
				pveAuthInfo.apiTicket.timeStamp = new Date().getTime();
				logging.Info(`New ticket generated. Next ticket generation in ${7200 - (-1 * Math.floor((pveAuthInfo.apiTicket.timeStamp + 7200 - new Date().getTime()) / 1000))}`);
			}
		}
	};

	let Module = {
		/**
		 * @access private
		 * @param {object} ticket
		 * @description Sets the ticket to be used to make request to the API.
		 *
		 *              __Used only by module `pve-api.js`.__
		 *
		 *              __Use of this function is highly discouraged!__
		 */
		_SetTicket: function (ticket) {
			pveAuthInfo.apiTicket.csrfPreventionToken = ticket.csrfPreventionToken;
			pveAuthInfo.apiTicket.ticket = ticket.ticket;
			pveAuthInfo.apiTicket.timeStamp = ticket.timeStamp;
			standaloneFlag = false;
		},

		SetSslVerifyPeer: (sslVerifyPeer) => {
			logging.Info(`SSL Verify Peer set to ${sslVerifyPeer}`);
			pve_utils.PveCurl.SetSslVerifyPeer(sslVerifyPeer);
		},

		SetSslVerifyHost: (sslVerifyHost) => {
			logging.Info(`SSL Verify Host set to ${sslVerifyHost}`);
			pve_utils.PveCurl.SetSslVerifyHost(sslVerifyHost);
		},

		Get: async function (poolid) {
			await _GenerateNewTicket();

			var reqBody = {
				poolid: poolid,
			};

			return await pve_utils.PveCurl.Get(
				`${pveAuthInfo.endpoint}/pools`,
				reqBody,
				{},
				{ PVEAuthCookie: pveAuthInfo.apiTicket.ticket }
			);
		},

		Post: async function (params) {
			await _GenerateNewTicket();

			var reqBody = params;

			return await pve_utils.PveCurl.Post(
				`${pveAuthInfo.endpoint}/pools`,
				reqBody,
				{ CSRFPreventionToken: pveAuthInfo.apiTicket.csrfPreventionToken },
				{ PVEAuthCookie: pveAuthInfo.apiTicket.ticket }
			);
		},

		PoolID: function (poolid) {
			return {
				Get: async function () {
					await _GenerateNewTicket();

					return await pve_utils.PveCurl.Get(
						`${pveAuthInfo.endpoint}/pools/${poolid}`,
						{},
						{},
						{ PVEAuthCookie: pveAuthInfo.apiTicket.ticket }
					);
				},

				Put: async function (params) {
					await _GenerateNewTicket();

					return await pve_utils.PveCurl.Put(
						`${pveAuthInfo.endpoint}/pools/${poolid}`,
						params,
						{ CSRFPreventionToken: pveAuthInfo.apiTicket.csrfPreventionToken },
						{ PVEAuthCookie: pveAuthInfo.apiTicket.ticket }
					);
				},

				Delete: async function (params) {
					await _GenerateNewTicket();

					return await pve_utils.PveCurl.Delete(
						`${pveAuthInfo.endpoint}/pools/${poolid}`,
						params,
						{ CSRFPreventionToken: pveAuthInfo.apiTicket.csrfPreventionToken },
						{ PVEAuthCookie: pveAuthInfo.apiTicket.ticket }
					);
				},
			};
		},
	};

	return Module;
};